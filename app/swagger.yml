---
swagger: '2.0'
info:
  title: Robot navigation API
  version: 0.0.1
basePath: /dev
consumes:
  - application/json
produces:
  - application/json
paths:
  /ping:
    get:
      summary: Test API point
      description: Returns 'pong' at success
      produces:
        - html/text
      responses:
        200:
          description: Successful operation
  /location:
    post:
      description: |
        Save path to db
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/location'
      responses:
        200:
          description: Successful operation

  /location/batch_save:
    post:
      description: |
        Save locations to db
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/locations'
      responses:
        200:
          description: Successful operation

  /location/{location_name}:
    get:
      parameters:
        - name: location_name
          in: path
          required: true
          type: string
      responses:
        200:
          description: Successful operation
  /dynamo:
    get:
      description: Get table content
      responses:
        200:
          description: Successful operation

  /location/upload:
    post:
      summary: Uploads a json file.
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: file
          type: file
          description: The file to upload.
      responses:
        200:
          description: Successful operation

  /path/upload:
    post:
      summary: Uploads a json file.
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: file
          type: file
          description: The file to upload.
      responses:
        200:
          description: Successful operation

  /path/batch_save:
    post:
      description: |
        Save locations to db
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/paths'
      responses:
        200:
          description: Successful operation

  /path:
    post:
      description: |
        Save path to db
      parameters:
        - name: body
          in: body
          schema:
            $ref: '#/definitions/path'
      responses:
        200:
          description: Successful operation

  /path/{path_dest}:
    get:
      description: Get path by path_dest param from db
      parameters:
        - name: path_dest
          in: path
          required: true
          type: string
      responses:
        200:
          description: Successful operation

definitions:
  path:
    type: object
    required: [path_dest, path, path_info]
    example: {
      "path": [
      {
        "azimuth": 5,
        "dist": 17
      },
      {
        "azimuth": 23,
        "dist": 5
      },
      {
        "azimuth": 12,
        "dist": 7
      }
      ],
      "path_dest": "45:56=>76:90",
      "path_info": {
          "start": [45, 56],
          "finish": [76, 90]
      }
    }
    properties:
      path_dest:
        type: string
        example: 0:0=>Camellia Road
      path_info:
        type: object
        required: [start, finish]
        properties:
          start:
            type: array
            minItems: 2
            maxItems: 2
            items:
              type: number
              minimum: 0
          finish:
            type: array
            minItems: 2
            maxItems: 2
            items:
              type: number
              minimum: 0
      path:
        type: array
        minItems: 1
        items:
          type: object
          required: [azimuth, dist]
          properties:
            azimuth:
              type: number
              description: Angle of rotation
              minimum: 0
              maximum: 360
              example: 180
            dist:
              type: number
              description: Distance
              example: 56
              minimum: 0

  paths:
    type: array
    minItems: 1
    items:
      $ref: '#/definitions/path'

  locations:
    type: array
    example: [{"name": "test", "x": 12, "y": 34}, {"name": "fcsdasdasd", "x": 12, "y": 34}]
    minItems: 1
    items:
      $ref: '#/definitions/location'

  location:
    type: object
    required: [name, x, y]
    properties:
      name:
        type: string
        example: test
      x:
        type: number
        example: 56
        minimum: 0
      y:
        type: number
        example: 45.78
        minimum: 0
